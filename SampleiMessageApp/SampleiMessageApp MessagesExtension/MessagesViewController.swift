//
//  MessagesViewController.swift
//  SampleiMessageApp MessagesExtension
//
//  Created by Eric Figura on 12/15/17.
//  Copyright Â© 2017 Eric Figura. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController
{
    var conversation: MSConversation?
    
    @IBOutlet weak var sendButton: UIButton!
    @IBAction func sendMessage(_ sender: Any) {
        let alternativeLayout = MSMessageTemplateLayout()
        let message = MSMessage()
        alternativeLayout.caption = "Test"
        message.layout = MSMessageLiveLayout(alternateLayout: alternativeLayout)
        conversation?.send(message, completionHandler: nil)
        requestPresentationStyle(.expanded)
    }
    override func didBecomeActive(with conversation: MSConversation) {
        super.didBecomeActive(with: conversation)
        
        if presentationStyle  == .transcript {
            let liveView = Bundle.main.loadNibNamed("LiveView", owner: self, options: nil)![0] as! LiveView
            view.addSubview(liveView)
            sendButton.isHidden = true
            liveView.start()
        }
    }
    @IBAction func closeButtonTapped(_ sender: Any)
    {
        dismiss()
    }
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        self.conversation = conversation
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    override func contentSizeThatFits(_ size: CGSize) -> CGSize {
        return CGSize(width: size.width, height: 300)
    }

}
